const async_hooks = require('async_hooks')
const {Traceback} = require('./traceback')

const db_trace = new Map()

const hook_trace = async_hooks.createHook @:
    init(asyncId, type, triggerId) ::
      const parent = db_trace.get(triggerId)
      const depth = undefined !== parent ? 1 + parent.depth : 1
      const key = `CPS[${depth}]::${type}`

      const err = new Error(key)
      err.triggerId = triggerId
      err.depth = depth

      if undefined !== parent ::
        let early = parent.early
        if undefined === early && 11 === depth ::
          early = asFrameList(triggerId)
        if undefined !== early ::
          Object.defineProperties @ err, {early: { value: early }}

      db_trace.set @ asyncId, err

  , destroy(asyncId) ::
      db_trace.delete @ asyncId


function asFrameList(triggerId, limit) ::
  const res = []
  if triggerId.triggerId && triggerId.depth ::
    res.push @ triggerId
    triggerId = triggerId.triggerId

  while triggerId ::
    const frame = db_trace.get(triggerId)
    if frame === undefined :: break
    res.push @ frame
    if res.length >= limit :: break
    triggerId = frame.triggerId

  return res


const api = @: Traceback

  , install() ::
      Error.stackTraceLimit = Math.max @ 30, Error.stackTraceLimit
      hook_trace.enable()
      return this

  , uninstall() ::
      hook_trace.disable()
      db_trace.clear()
      return this

  , withTraceback(Traceback) ::
      if 'function' !== typeof Traceback ::
        throw new TypeError @ `Expected an Traceback function supporting new`
      return @: Traceback, __proto__: this

  , capture(Traceback=this.Traceback) ::
      let raw_trace = db_trace.get @
        async_hooks.executionAsyncId()

      if undefined === raw_trace ::
        raw_trace = new Error @ `CPS[?]::unavailable`
      return new Traceback @ raw_trace, asFrameList

  , error(error) ::
      return this.capture().withError(error)

  , async_stack() ::
      return this.capture().async_stack()

export default api
export const install = api.install.bind(api)
export const uninstall = api.uninstall.bind(api)
export const withTraceback = api.withTraceback.bind(api)
export const capture = api.capture.bind(api)
export const error = api.error.bind(api)
export const async_stack = api.async_stack.bind(api)
