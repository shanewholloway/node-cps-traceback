'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const async_hooks = require('async_hooks');
const { Traceback } = require('./traceback');

const db_trace = new Map();

const hook_trace = async_hooks.createHook({
  init(asyncId, type, triggerId) {
    const parent = db_trace.get(triggerId);
    const depth = undefined !== parent ? 1 + parent.depth : 1;
    const key = `CPS[${depth}]::${type}`;

    const err = new Error(key);
    err.triggerId = triggerId;
    err.depth = depth;

    if (undefined !== parent) {
      let early = parent.early;
      if (undefined === early && 11 === depth) {
        early = asFrameList(triggerId);
      }
      if (undefined !== early) {
        Object.defineProperties(err, { early: { value: early } });
      }
    }

    db_trace.set(asyncId, err);
  }, destroy(asyncId) {
    db_trace.delete(asyncId);
  } });

function asFrameList(triggerId, limit) {
  const res = [];
  if (triggerId.triggerId && triggerId.depth) {
    res.push(triggerId);
    triggerId = triggerId.triggerId;
  }

  while (triggerId) {
    const frame = db_trace.get(triggerId);
    if (frame === undefined) {
      break;
    }
    res.push(frame);
    if (res.length >= limit) {
      break;
    }
    triggerId = frame.triggerId;
  }

  return res;
}

const api = { Traceback,

  install() {
    Error.stackTraceLimit = Math.max(30, Error.stackTraceLimit);
    hook_trace.enable();
    return this;
  }, uninstall() {
    hook_trace.disable();
    db_trace.clear();
    return this;
  }, withTraceback(Traceback) {
    if ('function' !== typeof Traceback) {
      throw new TypeError(`Expected an Traceback function supporting new`);
    }
    return { Traceback, __proto__: this };
  }, capture(Traceback = this.Traceback) {
    let raw_trace = db_trace.get(async_hooks.executionAsyncId());

    if (undefined === raw_trace) {
      raw_trace = new Error(`CPS[?]::unavailable`);
    }
    return new Traceback(raw_trace, asFrameList);
  } };exports.default = api;
const install = exports.install = api.install.bind(api);
const uninstall = exports.uninstall = api.uninstall.bind(api);
const withTraceback = exports.withTraceback = api.withTraceback.bind(api);
const capture = exports.capture = api.capture.bind(api);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaW5kZXguanN5Il0sIm5hbWVzIjpbImFzeW5jX2hvb2tzIiwicmVxdWlyZSIsIlRyYWNlYmFjayIsImRiX3RyYWNlIiwiTWFwIiwiaG9va190cmFjZSIsImNyZWF0ZUhvb2siLCJpbml0IiwiYXN5bmNJZCIsInR5cGUiLCJ0cmlnZ2VySWQiLCJwYXJlbnQiLCJnZXQiLCJkZXB0aCIsInVuZGVmaW5lZCIsImtleSIsImVyciIsIkVycm9yIiwiZWFybHkiLCJhc0ZyYW1lTGlzdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJ2YWx1ZSIsInNldCIsImRlc3Ryb3kiLCJkZWxldGUiLCJsaW1pdCIsInJlcyIsInB1c2giLCJmcmFtZSIsImxlbmd0aCIsImFwaSIsImluc3RhbGwiLCJzdGFja1RyYWNlTGltaXQiLCJNYXRoIiwibWF4IiwiZW5hYmxlIiwidW5pbnN0YWxsIiwiZGlzYWJsZSIsImNsZWFyIiwid2l0aFRyYWNlYmFjayIsIlR5cGVFcnJvciIsIl9fcHJvdG9fXyIsImNhcHR1cmUiLCJyYXdfdHJhY2UiLCJleGVjdXRpb25Bc3luY0lkIiwiYmluZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNQSxjQUFjQyxRQUFRLGFBQVIsQ0FBcEI7QUFDQSxNQUFNLEVBQUNDLFNBQUQsS0FBY0QsUUFBUSxhQUFSLENBQXBCOztBQUVBLE1BQU1FLFdBQVcsSUFBSUMsR0FBSixFQUFqQjs7QUFFQSxNQUFNQyxhQUFhTCxZQUFZTSxVQUFaLENBQXlCO0FBQ3hDQyxPQUFLQyxPQUFMLEVBQWNDLElBQWQsRUFBb0JDLFNBQXBCLEVBQStCO0FBQzdCLFVBQU1DLFNBQVNSLFNBQVNTLEdBQVQsQ0FBYUYsU0FBYixDQUFmO0FBQ0EsVUFBTUcsUUFBUUMsY0FBY0gsTUFBZCxHQUF1QixJQUFJQSxPQUFPRSxLQUFsQyxHQUEwQyxDQUF4RDtBQUNBLFVBQU1FLE1BQU8sT0FBTUYsS0FBTSxNQUFLSixJQUFLLEVBQW5DOztBQUVBLFVBQU1PLE1BQU0s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akIsQ0FBaEIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc3luY19ob29rcyA9IHJlcXVpcmUoJ2FzeW5jX2hvb2tzJylcbmNvbnN0IHtUcmFjZWJhY2t9ID0gcmVxdWlyZSgnLi90cmFjZWJhY2snKVxuXG5jb25zdCBkYl90cmFjZSA9IG5ldyBNYXAoKVxuXG5jb25zdCBob29rX3RyYWNlID0gYXN5bmNfaG9va3MuY3JlYXRlSG9vayBAOlxuICAgIGluaXQoYXN5bmNJZCwgdHlwZSwgdHJpZ2dlcklkKSA6OlxuICAgICAgY29uc3QgcGFyZW50ID0gZGJfdHJhY2UuZ2V0KHRyaWdnZXJJZClcbiAgICAgIGNvbnN0IGRlcHRoID0gdW5kZWZpbmVkICE9PSBwYXJlbnQgPyAxICsgcGFyZW50LmRlcHRoIDogMVxuICAgICAgY29uc3Qga2V5ID0gYENQU1ske2RlcHRofV06OiR7dHlwZX1gXG5cbiAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihrZXkpXG4gICAgICBlcnIudHJpZ2dlcklkID0gdHJpZ2dlcklkXG4gICAgICBlcnIuZGVwdGggPSBkZXB0aFxuXG4gICAgICBpZiB1bmRlZmluZWQgIT09IHBhcmVudCA6OlxuICAgICAgICBsZXQgZWFybHkgPSBwYXJlbnQuZWFybHlcbiAgICAgICAgaWYgdW5kZWZpbmVkID09PSBlYXJseSAmJiAxMSA9PT0gZGVwdGggOjpcbiAgICAgICAgICBlYXJseSA9IGFzRnJhbWVMaXN0KHRyaWdnZXJJZClcbiAgICAgICAgaWYgdW5kZWZpbmVkICE9PSBlYXJseSA6OlxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIEAgZXJyLCB7ZWFybHk6IHsgdmFsdWU6IGVhcmx5IH19XG5cbiAgICAgIGRiX3RyYWNlLnNldCBAIGFzeW5jSWQsIGVyclxuXG4gICwgZGVzdHJveShhc3luY0lkKSA6OlxuICAgICAgZGJfdHJhY2UuZGVsZXRlIEAgYXN5bmNJZFxuXG5cbmZ1bmN0aW9uIGFzRnJhbWVMaXN0KHRyaWdnZXJJZCwgbGltaXQpIDo6XG4gIGNvbnN0IHJlcyA9IFtdXG4gIGlmIHRyaWdnZXJJZC50cmlnZ2VySWQgJiYgdHJpZ2dlcklkLmRlcHRoIDo6XG4gICAgcmVzLnB1c2ggQCB0cmlnZ2VySWRcbiAgICB0cmlnZ2VySWQgPSB0cmlnZ2VySWQudHJpZ2dlcklkXG5cbiAgd2hpbGUgdHJpZ2dlcklkIDo6XG4gICAgY29uc3QgZnJhbWUgPSBkYl90cmFjZS5nZXQodHJpZ2dlcklkKVxuICAgIGlmIGZyYW1lID09PSB1bmRlZmluZWQgOjogYnJlYWtcbiAgICByZXMucHVzaCBAIGZyYW1lXG4gICAgaWYgcmVzLmxlbmd0aCA+PSBsaW1pdCA6OiBicmVha1xuICAgIHRyaWdnZXJJZCA9IGZyYW1lLnRyaWdnZXJJZFxuXG4gIHJldHVybiByZXNcblxuXG5jb25zdCBhcGkgPSBAOiBUcmFjZWJhY2tcblxuICAsIGluc3RhbGwoKSA6OlxuICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gTWF0aC5tYXggQCAzMCwgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0XG4gICAgICBob29rX3RyYWNlLmVuYWJsZSgpXG4gICAgICByZXR1cm4gdGhpc1xuXG4gICwgdW5pbnN0YWxsKCkgOjpcbiAgICAgIGhvb2tfdHJhY2UuZGlzYWJsZSgpXG4gICAgICBkYl90cmFjZS5jbGVhcigpXG4gICAgICByZXR1cm4gdGhpc1xuXG4gICwgd2l0aFRyYWNlYmFjayhUcmFjZWJhY2spIDo6XG4gICAgICBpZiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgVHJhY2ViYWNrIDo6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IgQCBgRXhwZWN0ZWQgYW4gVHJhY2ViYWNrIGZ1bmN0aW9uIHN1cHBvcnRpbmcgbmV3YFxuICAgICAgcmV0dXJuIEA6IFRyYWNlYmFjaywgX19wcm90b19fOiB0aGlzXG5cbiAgLCBjYXB0dXJlKFRyYWNlYmFjaz10aGlzLlRyYWNlYmFjaykgOjpcbiAgICAgIGxldCByYXdfdHJhY2UgPSBkYl90cmFjZS5nZXQgQFxuICAgICAgICBhc3luY19ob29rcy5leGVjdXRpb25Bc3luY0lkKClcblxuICAgICAgaWYgdW5kZWZpbmVkID09PSByYXdfdHJhY2UgOjpcbiAgICAgICAgcmF3X3RyYWNlID0gbmV3IEVycm9yIEAgYENQU1s/XTo6dW5hdmFpbGFibGVgXG4gICAgICByZXR1cm4gbmV3IFRyYWNlYmFjayBAIHJhd190cmFjZSwgYXNGcmFtZUxpc3RcblxuZXhwb3J0IGRlZmF1bHQgYXBpXG5leHBvcnQgY29uc3QgaW5zdGFsbCA9IGFwaS5pbnN0YWxsLmJpbmQoYXBpKVxuZXhwb3J0IGNvbnN0IHVuaW5zdGFsbCA9IGFwaS51bmluc3RhbGwuYmluZChhcGkpXG5leHBvcnQgY29uc3Qgd2l0aFRyYWNlYmFjayA9IGFwaS53aXRoVHJhY2ViYWNrLmJpbmQoYXBpKVxuZXhwb3J0IGNvbnN0IGNhcHR1cmUgPSBhcGkuY2FwdHVyZS5iaW5kKGFwaSlcbiJdfQ==