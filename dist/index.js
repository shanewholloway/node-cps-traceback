'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const async_hooks = require('async_hooks');
const { Traceback } = require('./traceback');

const db_trace = new Map();

const hook_trace = async_hooks.createHook({
  init(asyncId, type, triggerId) {
    const parent = db_trace.get(triggerId);
    const depth = undefined !== parent ? 1 + parent.depth : 1;
    const key = `CPS[${depth}]::${type}`;

    const err = new Error(key);
    err.triggerId = triggerId;
    err.depth = depth;

    if (undefined !== parent) {
      let early = parent.early;
      if (undefined === early && 11 === depth) {
        early = asFrameList(triggerId);
      }
      if (undefined !== early) {
        Object.defineProperties(err, { early: { value: early } });
      }
    }

    db_trace.set(asyncId, err);
  }, destroy(asyncId) {
    db_trace.delete(asyncId);
  } });

function asFrameList(triggerId, limit) {
  const res = [];
  if (triggerId.triggerId && triggerId.depth) {
    res.push(triggerId);
    triggerId = triggerId.triggerId;
  }

  while (triggerId) {
    const frame = db_trace.get(triggerId);
    if (frame === undefined) {
      break;
    }
    res.push(frame);
    if (res.length >= limit) {
      break;
    }
    triggerId = frame.triggerId;
  }

  return res;
}

const api = { Traceback,

  install() {
    Error.stackTraceLimit = Math.max(30, Error.stackTraceLimit);
    hook_trace.enable();
    return this;
  }, uninstall() {
    hook_trace.disable();
    db_trace.clear();
    return this;
  }, withTraceback(Traceback) {
    if ('function' !== typeof Traceback) {
      throw new TypeError(`Expected an Traceback function supporting new`);
    }
    return { Traceback, __proto__: this };
  }, capture(Traceback = this.Traceback) {
    let raw_trace = db_trace.get(async_hooks.executionAsyncId());

    if (undefined === raw_trace) {
      raw_trace = new Error(`CPS[?]::unavailable`);
    }
    return new Traceback(raw_trace, asFrameList);
  }, async_stack() {
    return this.capture().async_stack;
  } };exports.default = api;
const install = exports.install = api.install.bind(api);
const uninstall = exports.uninstall = api.uninstall.bind(api);
const withTraceback = exports.withTraceback = api.withTraceback.bind(api);
const capture = exports.capture = api.capture.bind(api);
const async_stack = exports.async_stack = api.async_stack.bind(api);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaW5kZXguanN5Il0sIm5hbWVzIjpbImFzeW5jX2hvb2tzIiwicmVxdWlyZSIsIlRyYWNlYmFjayIsImRiX3RyYWNlIiwiTWFwIiwiaG9va190cmFjZSIsImNyZWF0ZUhvb2siLCJpbml0IiwiYXN5bmNJZCIsInR5cGUiLCJ0cmlnZ2VySWQiLCJwYXJlbnQiLCJnZXQiLCJkZXB0aCIsInVuZGVmaW5lZCIsImtleSIsImVyciIsIkVycm9yIiwiZWFybHkiLCJhc0ZyYW1lTGlzdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJ2YWx1ZSIsInNldCIsImRlc3Ryb3kiLCJkZWxldGUiLCJsaW1pdCIsInJlcyIsInB1c2giLCJmcmFtZSIsImxlbmd0aCIsImFwaSIsImluc3RhbGwiLCJzdGFja1RyYWNlTGltaXQiLCJNYXRoIiwibWF4IiwiZW5hYmxlIiwidW5pbnN0YWxsIiwiZGlzYWJsZSIsImNsZWFyIiwid2l0aFRyYWNlYmFjayIsIlR5cGVFcnJvciIsIl9fcHJvdG9fXyIsImNhcHR1cmUiLCJyYXdfdHJhY2UiLCJleGVjdXRpb25Bc3luY0lkIiwiYXN5bmNfc3RhY2siLCJiaW5kIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLGNBQWNDLFFBQVEsYUFBUixDQUFwQjtBQUNBLE1BQU0sRUFBQ0MsU0FBRCxLQUFjRCxRQUFRLGFBQVIsQ0FBcEI7O0FBRUEsTUFBTUUsV0FBVyxJQUFJQyxHQUFKLEVBQWpCOztBQUVBLE1BQU1DLGFBQWFMLFlBQVlNLFVBQVosQ0FBeUI7QUFDeENDLE9BQUtDLE9BQUwsRUFBY0MsSUFBZCxFQUFvQkMsU0FBcEIsRUFBK0I7QUFDN0IsVUFBTUMsU0FBU1IsU0FBU1MsR0FBVCxDQUFhRixTQUFiLENBQWY7QUFDQSxVQUFNRyxRQUFRQyxjQUFjSCxNQUFkLEdBQXVCLElBQUlBLE9BQU9FLEtBQWxDLEdBQTBDLENBQXhEO0FBQ0EsVUFBTUUsTUFBTyxPQUFNRixLQUFNLE1BQUtKLElBQUssRUFBbkM7O0FB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SUFBbEIsQ0FBdUJoQixHQUF2QixDQUF0QjtBQUNBLE1BQU1ZLDRCQUFVWixJQUFJWSxPQUFKLENBQVlJLElBQVosQ0FBaUJoQixHQUFqQixDQUFoQjtBQUNBLE1BQU1lLG9DQUFjZixJQUFJZSxXQUFKLENBQWdCQyxJQUFoQixDQUFxQmhCLEdBQXJCLENBQXBCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXN5bmNfaG9va3MgPSByZXF1aXJlKCdhc3luY19ob29rcycpXG5jb25zdCB7VHJhY2ViYWNrfSA9IHJlcXVpcmUoJy4vdHJhY2ViYWNrJylcblxuY29uc3QgZGJfdHJhY2UgPSBuZXcgTWFwKClcblxuY29uc3QgaG9va190cmFjZSA9IGFzeW5jX2hvb2tzLmNyZWF0ZUhvb2sgQDpcbiAgICBpbml0KGFzeW5jSWQsIHR5cGUsIHRyaWdnZXJJZCkgOjpcbiAgICAgIGNvbnN0IHBhcmVudCA9IGRiX3RyYWNlLmdldCh0cmlnZ2VySWQpXG4gICAgICBjb25zdCBkZXB0aCA9IHVuZGVmaW5lZCAhPT0gcGFyZW50ID8gMSArIHBhcmVudC5kZXB0aCA6IDFcbiAgICAgIGNvbnN0IGtleSA9IGBDUFNbJHtkZXB0aH1dOjoke3R5cGV9YFxuXG4gICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3Ioa2V5KVxuICAgICAgZXJyLnRyaWdnZXJJZCA9IHRyaWdnZXJJZFxuICAgICAgZXJyLmRlcHRoID0gZGVwdGhcblxuICAgICAgaWYgdW5kZWZpbmVkICE9PSBwYXJlbnQgOjpcbiAgICAgICAgbGV0IGVhcmx5ID0gcGFyZW50LmVhcmx5XG4gICAgICAgIGlmIHVuZGVmaW5lZCA9PT0gZWFybHkgJiYgMTEgPT09IGRlcHRoIDo6XG4gICAgICAgICAgZWFybHkgPSBhc0ZyYW1lTGlzdCh0cmlnZ2VySWQpXG4gICAgICAgIGlmIHVuZGVmaW5lZCAhPT0gZWFybHkgOjpcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyBAIGVyciwge2Vhcmx5OiB7IHZhbHVlOiBlYXJseSB9fVxuXG4gICAgICBkYl90cmFjZS5zZXQgQCBhc3luY0lkLCBlcnJcblxuICAsIGRlc3Ryb3koYXN5bmNJZCkgOjpcbiAgICAgIGRiX3RyYWNlLmRlbGV0ZSBAIGFzeW5jSWRcblxuXG5mdW5jdGlvbiBhc0ZyYW1lTGlzdCh0cmlnZ2VySWQsIGxpbWl0KSA6OlxuICBjb25zdCByZXMgPSBbXVxuICBpZiB0cmlnZ2VySWQudHJpZ2dlcklkICYmIHRyaWdnZXJJZC5kZXB0aCA6OlxuICAgIHJlcy5wdXNoIEAgdHJpZ2dlcklkXG4gICAgdHJpZ2dlcklkID0gdHJpZ2dlcklkLnRyaWdnZXJJZFxuXG4gIHdoaWxlIHRyaWdnZXJJZCA6OlxuICAgIGNvbnN0IGZyYW1lID0gZGJfdHJhY2UuZ2V0KHRyaWdnZXJJZClcbiAgICBpZiBmcmFtZSA9PT0gdW5kZWZpbmVkIDo6IGJyZWFrXG4gICAgcmVzLnB1c2ggQCBmcmFtZVxuICAgIGlmIHJlcy5sZW5ndGggPj0gbGltaXQgOjogYnJlYWtcbiAgICB0cmlnZ2VySWQgPSBmcmFtZS50cmlnZ2VySWRcblxuICByZXR1cm4gcmVzXG5cblxuY29uc3QgYXBpID0gQDogVHJhY2ViYWNrXG5cbiAgLCBpbnN0YWxsKCkgOjpcbiAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IE1hdGgubWF4IEAgMzAsIEVycm9yLnN0YWNrVHJhY2VMaW1pdFxuICAgICAgaG9va190cmFjZS5lbmFibGUoKVxuICAgICAgcmV0dXJuIHRoaXNcblxuICAsIHVuaW5zdGFsbCgpIDo6XG4gICAgICBob29rX3RyYWNlLmRpc2FibGUoKVxuICAgICAgZGJfdHJhY2UuY2xlYXIoKVxuICAgICAgcmV0dXJuIHRoaXNcblxuICAsIHdpdGhUcmFjZWJhY2soVHJhY2ViYWNrKSA6OlxuICAgICAgaWYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIFRyYWNlYmFjayA6OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yIEAgYEV4cGVjdGVkIGFuIFRyYWNlYmFjayBmdW5jdGlvbiBzdXBwb3J0aW5nIG5ld2BcbiAgICAgIHJldHVybiBAOiBUcmFjZWJhY2ssIF9fcHJvdG9fXzogdGhpc1xuXG4gICwgY2FwdHVyZShUcmFjZWJhY2s9dGhpcy5UcmFjZWJhY2spIDo6XG4gICAgICBsZXQgcmF3X3RyYWNlID0gZGJfdHJhY2UuZ2V0IEBcbiAgICAgICAgYXN5bmNfaG9va3MuZXhlY3V0aW9uQXN5bmNJZCgpXG5cbiAgICAgIGlmIHVuZGVmaW5lZCA9PT0gcmF3X3RyYWNlIDo6XG4gICAgICAgIHJhd190cmFjZSA9IG5ldyBFcnJvciBAIGBDUFNbP106OnVuYXZhaWxhYmxlYFxuICAgICAgcmV0dXJuIG5ldyBUcmFjZWJhY2sgQCByYXdfdHJhY2UsIGFzRnJhbWVMaXN0XG5cbiAgLCBhc3luY19zdGFjaygpIDo6XG4gICAgICByZXR1cm4gdGhpcy5jYXB0dXJlKCkuYXN5bmNfc3RhY2tcblxuZXhwb3J0IGRlZmF1bHQgYXBpXG5leHBvcnQgY29uc3QgaW5zdGFsbCA9IGFwaS5pbnN0YWxsLmJpbmQoYXBpKVxuZXhwb3J0IGNvbnN0IHVuaW5zdGFsbCA9IGFwaS51bmluc3RhbGwuYmluZChhcGkpXG5leHBvcnQgY29uc3Qgd2l0aFRyYWNlYmFjayA9IGFwaS53aXRoVHJhY2ViYWNrLmJpbmQoYXBpKVxuZXhwb3J0IGNvbnN0IGNhcHR1cmUgPSBhcGkuY2FwdHVyZS5iaW5kKGFwaSlcbmV4cG9ydCBjb25zdCBhc3luY19zdGFjayA9IGFwaS5hc3luY19zdGFjay5iaW5kKGFwaSlcbiJdfQ==