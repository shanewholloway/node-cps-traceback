'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const async_hooks = require('async_hooks');
const { Traceback } = require('./traceback');

const db_trace = new Map();

const hook_trace = async_hooks.createHook({
  init(asyncId, type, triggerId) {
    const parent = db_trace.get(triggerId);
    const depth = undefined !== parent ? 1 + parent.depth : 1;
    const key = `CPS[${depth}]::${type}`;

    const err = new Error(key);
    err.triggerId = triggerId;
    err.depth = depth;

    if (undefined !== parent) {
      let early = parent.early;
      if (undefined === early && 11 === depth) {
        early = asFrameList(triggerId);
      }
      if (undefined !== early) {
        Object.defineProperties(err, { early: { value: early } });
      }
    }

    db_trace.set(asyncId, err);
  }, destroy(asyncId) {
    db_trace.delete(asyncId);
  } });

function asFrameList(triggerId, limit) {
  const res = [];
  if (triggerId.triggerId && triggerId.depth) {
    res.push(triggerId);
    triggerId = triggerId.triggerId;
  }

  while (triggerId) {
    const frame = db_trace.get(triggerId);
    if (frame === undefined) {
      break;
    }
    res.push(frame);
    if (res.length >= limit) {
      break;
    }
    triggerId = frame.triggerId;
  }

  return res;
}

const api = { Traceback,

  install() {
    Error.stackTraceLimit = Math.max(30, Error.stackTraceLimit);
    hook_trace.enable();
    return this;
  }, uninstall() {
    hook_trace.disable();
    db_trace.clear();
    return this;
  }, withTraceback(Traceback) {
    if ('function' !== typeof Traceback) {
      throw new TypeError(`Expected an Traceback function supporting new`);
    }
    return { Traceback, __proto__: this };
  }, capture(Traceback = this.Traceback) {
    let raw_trace = db_trace.get(async_hooks.executionAsyncId());

    if (undefined === raw_trace) {
      raw_trace = new Error(`CPS[?]::unavailable`);
    }
    return new Traceback(raw_trace, asFrameList);
  }, error(error) {
    return this.capture().withError(error);
  }, async_stack() {
    return this.capture().async_stack();
  } };exports.default = api;
const install = exports.install = api.install.bind(api);
const uninstall = exports.uninstall = api.uninstall.bind(api);
const withTraceback = exports.withTraceback = api.withTraceback.bind(api);
const capture = exports.capture = api.capture.bind(api);
const error = exports.error = api.error.bind(api);
const async_stack = exports.async_stack = api.async_stack.bind(api);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaW5kZXguanN5Il0sIm5hbWVzIjpbImFzeW5jX2hvb2tzIiwicmVxdWlyZSIsIlRyYWNlYmFjayIsImRiX3RyYWNlIiwiTWFwIiwiaG9va190cmFjZSIsImNyZWF0ZUhvb2siLCJpbml0IiwiYXN5bmNJZCIsInR5cGUiLCJ0cmlnZ2VySWQiLCJwYXJlbnQiLCJnZXQiLCJkZXB0aCIsInVuZGVmaW5lZCIsImtleSIsImVyciIsIkVycm9yIiwiZWFybHkiLCJhc0ZyYW1lTGlzdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJ2YWx1ZSIsInNldCIsImRlc3Ryb3kiLCJkZWxldGUiLCJsaW1pdCIsInJlcyIsInB1c2giLCJmcmFtZSIsImxlbmd0aCIsImFwaSIsImluc3RhbGwiLCJzdGFja1RyYWNlTGltaXQiLCJNYXRoIiwibWF4IiwiZW5hYmxlIiwidW5pbnN0YWxsIiwiZGlzYWJsZSIsImNsZWFyIiwid2l0aFRyYWNlYmFjayIsIlR5cGVFcnJvciIsIl9fcHJvdG9fXyIsImNhcHR1cmUiLCJyYXdfdHJhY2UiLCJleGVjdXRpb25Bc3luY0lkIiwiZXJyb3IiLCJ3aXRoRXJyb3IiLCJhc3luY19zdGFjayIsImJpbmQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsY0FBY0MsUUFBUSxhQUFSLENBQXBCO0FBQ0EsTUFBTSxFQUFDQyxTQUFELEtBQWNELFFBQVEsYUFBUixDQUFwQjs7QUFFQSxNQUFNRSxXQUFXLElBQUlDLEdBQUosRUFBakI7O0FBRUEsTUFBTUMsYUFBYUwsWUFBWU0sVUFBWixDQUF5QjtBQUN4Q0MsT0FBS0MsT0FBTCxFQUFjQyxJQUFkLEVBQW9CQyxTQUFwQixFQUErQjtBQUM3QixVQUFNQyxTQUFTUixTQUFTUyxHQUFULENBQWFGLFNBQWIsQ0FBZjtBQUNBLFVBQU1HLFFBQVFDLGNBQWNILE1BQWQsR0FBdUIsSUFBSUEsT0FBT0UsS0FBbEMsR0FBMEMsQ0FBeEQ7QUFDQSxVQUFNRSxNQUFPLE9BQU1GLEtBQU0s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bEIsR0FBakIsQ0FBaEI7QUFDQSxNQUFNTSxnQ0FBWU4sSUFBSU0sU0FBSixDQUFjWSxJQUFkLENBQW1CbEIsR0FBbkIsQ0FBbEI7QUFDQSxNQUFNUyx3Q0FBZ0JULElBQUlTLGFBQUosQ0FBa0JTLElBQWxCLENBQXVCbEIsR0FBdkIsQ0FBdEI7QUFDQSxNQUFNWSw0QkFBVVosSUFBSVksT0FBSixDQUFZTSxJQUFaLENBQWlCbEIsR0FBakIsQ0FBaEI7QUFDQSxNQUFNZSx3QkFBUWYsSUFBSWUsS0FBSixDQUFVRyxJQUFWLENBQWVsQixHQUFmLENBQWQ7QUFDQSxNQUFNaUIsb0NBQWNqQixJQUFJaUIsV0FBSixDQUFnQkMsSUFBaEIsQ0FBcUJsQixHQUFyQixDQUFwQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzeW5jX2hvb2tzID0gcmVxdWlyZSgnYXN5bmNfaG9va3MnKVxuY29uc3Qge1RyYWNlYmFja30gPSByZXF1aXJlKCcuL3RyYWNlYmFjaycpXG5cbmNvbnN0IGRiX3RyYWNlID0gbmV3IE1hcCgpXG5cbmNvbnN0IGhvb2tfdHJhY2UgPSBhc3luY19ob29rcy5jcmVhdGVIb29rIEA6XG4gICAgaW5pdChhc3luY0lkLCB0eXBlLCB0cmlnZ2VySWQpIDo6XG4gICAgICBjb25zdCBwYXJlbnQgPSBkYl90cmFjZS5nZXQodHJpZ2dlcklkKVxuICAgICAgY29uc3QgZGVwdGggPSB1bmRlZmluZWQgIT09IHBhcmVudCA/IDEgKyBwYXJlbnQuZGVwdGggOiAxXG4gICAgICBjb25zdCBrZXkgPSBgQ1BTWyR7ZGVwdGh9XTo6JHt0eXBlfWBcblxuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGtleSlcbiAgICAgIGVyci50cmlnZ2VySWQgPSB0cmlnZ2VySWRcbiAgICAgIGVyci5kZXB0aCA9IGRlcHRoXG5cbiAgICAgIGlmIHVuZGVmaW5lZCAhPT0gcGFyZW50IDo6XG4gICAgICAgIGxldCBlYXJseSA9IHBhcmVudC5lYXJseVxuICAgICAgICBpZiB1bmRlZmluZWQgPT09IGVhcmx5ICYmIDExID09PSBkZXB0aCA6OlxuICAgICAgICAgIGVhcmx5ID0gYXNGcmFtZUxpc3QodHJpZ2dlcklkKVxuICAgICAgICBpZiB1bmRlZmluZWQgIT09IGVhcmx5IDo6XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgQCBlcnIsIHtlYXJseTogeyB2YWx1ZTogZWFybHkgfX1cblxuICAgICAgZGJfdHJhY2Uuc2V0IEAgYXN5bmNJZCwgZXJyXG5cbiAgLCBkZXN0cm95KGFzeW5jSWQpIDo6XG4gICAgICBkYl90cmFjZS5kZWxldGUgQCBhc3luY0lkXG5cblxuZnVuY3Rpb24gYXNGcmFtZUxpc3QodHJpZ2dlcklkLCBsaW1pdCkgOjpcbiAgY29uc3QgcmVzID0gW11cbiAgaWYgdHJpZ2dlcklkLnRyaWdnZXJJZCAmJiB0cmlnZ2VySWQuZGVwdGggOjpcbiAgICByZXMucHVzaCBAIHRyaWdnZXJJZFxuICAgIHRyaWdnZXJJZCA9IHRyaWdnZXJJZC50cmlnZ2VySWRcblxuICB3aGlsZSB0cmlnZ2VySWQgOjpcbiAgICBjb25zdCBmcmFtZSA9IGRiX3RyYWNlLmdldCh0cmlnZ2VySWQpXG4gICAgaWYgZnJhbWUgPT09IHVuZGVmaW5lZCA6OiBicmVha1xuICAgIHJlcy5wdXNoIEAgZnJhbWVcbiAgICBpZiByZXMubGVuZ3RoID49IGxpbWl0IDo6IGJyZWFrXG4gICAgdHJpZ2dlcklkID0gZnJhbWUudHJpZ2dlcklkXG5cbiAgcmV0dXJuIHJlc1xuXG5cbmNvbnN0IGFwaSA9IEA6IFRyYWNlYmFja1xuXG4gICwgaW5zdGFsbCgpIDo6XG4gICAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBNYXRoLm1heCBAIDMwLCBFcnJvci5zdGFja1RyYWNlTGltaXRcbiAgICAgIGhvb2tfdHJhY2UuZW5hYmxlKClcbiAgICAgIHJldHVybiB0aGlzXG5cbiAgLCB1bmluc3RhbGwoKSA6OlxuICAgICAgaG9va190cmFjZS5kaXNhYmxlKClcbiAgICAgIGRiX3RyYWNlLmNsZWFyKClcbiAgICAgIHJldHVybiB0aGlzXG5cbiAgLCB3aXRoVHJhY2ViYWNrKFRyYWNlYmFjaykgOjpcbiAgICAgIGlmICdmdW5jdGlvbicgIT09IHR5cGVvZiBUcmFjZWJhY2sgOjpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvciBAIGBFeHBlY3RlZCBhbiBUcmFjZWJhY2sgZnVuY3Rpb24gc3VwcG9ydGluZyBuZXdgXG4gICAgICByZXR1cm4gQDogVHJhY2ViYWNrLCBfX3Byb3RvX186IHRoaXNcblxuICAsIGNhcHR1cmUoVHJhY2ViYWNrPXRoaXMuVHJhY2ViYWNrKSA6OlxuICAgICAgbGV0IHJhd190cmFjZSA9IGRiX3RyYWNlLmdldCBAXG4gICAgICAgIGFzeW5jX2hvb2tzLmV4ZWN1dGlvbkFzeW5jSWQoKVxuXG4gICAgICBpZiB1bmRlZmluZWQgPT09IHJhd190cmFjZSA6OlxuICAgICAgICByYXdfdHJhY2UgPSBuZXcgRXJyb3IgQCBgQ1BTWz9dOjp1bmF2YWlsYWJsZWBcbiAgICAgIHJldHVybiBuZXcgVHJhY2ViYWNrIEAgcmF3X3RyYWNlLCBhc0ZyYW1lTGlzdFxuXG4gICwgZXJyb3IoZXJyb3IpIDo6XG4gICAgICByZXR1cm4gdGhpcy5jYXB0dXJlKCkud2l0aEVycm9yKGVycm9yKVxuXG4gICwgYXN5bmNfc3RhY2soKSA6OlxuICAgICAgcmV0dXJuIHRoaXMuY2FwdHVyZSgpLmFzeW5jX3N0YWNrKClcblxuZXhwb3J0IGRlZmF1bHQgYXBpXG5leHBvcnQgY29uc3QgaW5zdGFsbCA9IGFwaS5pbnN0YWxsLmJpbmQoYXBpKVxuZXhwb3J0IGNvbnN0IHVuaW5zdGFsbCA9IGFwaS51bmluc3RhbGwuYmluZChhcGkpXG5leHBvcnQgY29uc3Qgd2l0aFRyYWNlYmFjayA9IGFwaS53aXRoVHJhY2ViYWNrLmJpbmQoYXBpKVxuZXhwb3J0IGNvbnN0IGNhcHR1cmUgPSBhcGkuY2FwdHVyZS5iaW5kKGFwaSlcbmV4cG9ydCBjb25zdCBlcnJvciA9IGFwaS5lcnJvci5iaW5kKGFwaSlcbmV4cG9ydCBjb25zdCBhc3luY19zdGFjayA9IGFwaS5hc3luY19zdGFjay5iaW5kKGFwaSlcbiJdfQ==