'use strict';

try {
  var async_hooks = require('async_hooks');
  if ('function' !== typeof async_hooks.executionAsyncId) {
    throw new Error(`Missing executionAsyncId function`);
  }
} catch (err) {
  async_hooks = undefined;
  console.warn(`Unable to load async_hooks module (Node 8.2+ required).\n  (reason: ${err.message})`);
}

const { Traceback } = require('./traceback');

const db_trace = new Map();

const hook_trace = async_hooks ? async_hooks.createHook({
  destroy(asyncId) {
    db_trace.delete(asyncId);
  }, init(asyncId, type, triggerId) {
    const parent = db_trace.get(triggerId);
    const depth = undefined !== parent ? 1 + parent.depth : 1;
    const key = `CPS[${depth}]::${type}`;

    const err = new Error(key);
    err.triggerId = triggerId;
    err.depth = depth;

    if (undefined !== parent) {
      let early = parent.early;
      if (undefined === early && 11 === depth) {
        early = asFrameList(triggerId);
      }
      if (undefined !== early) {
        Object.defineProperties(err, { early: { value: early } });
      }
    }

    db_trace.set(asyncId, err);
  } }) : null;

function asFrameList(triggerId, limit) {
  const res = [];
  if (triggerId.triggerId && triggerId.depth) {
    res.push(triggerId);
    triggerId = triggerId.triggerId;
  }

  while (triggerId) {
    const frame = db_trace.get(triggerId);
    if (frame === undefined) {
      break;
    }
    res.push(frame);
    if (res.length >= limit) {
      break;
    }
    triggerId = frame.triggerId;
  }

  return res;
}

const api = { Traceback,
  isSupported() {
    return !!hook_trace;
  }, isActive() {
    return hook_trace ? hook_trace.active : undefined;
  }, install() {
    Error.stackTraceLimit = Math.max(30, Error.stackTraceLimit);
    if (hook_trace) {
      hook_trace.enable();
      hook_trace.active = true;
    }
    return this;
  }, uninstall() {
    db_trace.clear();
    if (hook_trace) {
      hook_trace.disable();
      hook_trace.active = false;
    }
    return this;
  }, withTraceback(Traceback) {
    if ('function' !== typeof Traceback) {
      throw new TypeError(`Expected an Traceback function supporting new`);
    }
    return { Traceback, __proto__: this };
  }, capture(Traceback = this.Traceback) {
    let raw_trace = async_hooks ? db_trace.get(async_hooks.executionAsyncId()) : undefined;

    if (undefined === raw_trace) {
      raw_trace = new Error(`CPS[?]::unavailable`);
    }
    return new Traceback(raw_trace, asFrameList);
  }, error(error) {
    return this.capture().withError(error);
  }, async_stack() {
    return this.capture().async_stack();
  } };

api.api = api.default = api;
module.exports = exports = api;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,