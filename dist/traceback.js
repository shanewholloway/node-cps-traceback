'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diff_stack_list = diff_stack_list;
exports.as_stack_filter = as_stack_filter;
exports.diff_frame_lines = diff_frame_lines;
class Traceback {
  constructor(trace_tip, asFrameList) {
    this.trace_tip = trace_tip;
    this.asFrameList = asFrameList;
  }

  async_stack() {
    return this.toString();
  }

  toString(lead = '') {
    const { tail, head } = this.toLines();
    const lines = head.length ? [lead].concat(tail, ['    ...'], head) : [lead].concat(tail);
    return lines.join('\n');
  }

  toLines(limit) {
    return this.toFrames(limit, flatten);
  }

  toFrames(limit, xform) {
    if (!xform) {
      xform = v => v;
    }
    const err_frames = this.toErrorFrames(limit);
    const head = xform(diff_stack_list(err_frames.head, this.stack_filter));
    const tail = xform(diff_stack_list(err_frames.tail, this.stack_filter));
    return { tail, head };
  }

  toErrorFrames(limit) {
    if (undefined === limit) {
      limit = this.default_limit;
    }
    const tip = this.trace_tip;
    const head = tip.early;
    const tail = this.asFrameList(tip, limit);
    const idx = head ? tail.indexOf(head[0]) : -1;
    if (-1 < idx) {
      tail.splice(idx, tail.length, ...head.splice(0, head.length));
    }
    return { tail, head };
  }
}exports.Traceback = Traceback;


Traceback.prototype.default_limit = 10;
Traceback.prototype.stack_filter = as_stack_filter(new Set(['bootstrap_node', 'AsyncHook.init'].concat(Object.keys(process.binding('natives')))));function diff_stack_list(error_frames, stack_filter, asRawFrames) {
  if (!error_frames || !error_frames.length) {
    return [];
  }

  if ('function' !== typeof stack_filter) {
    stack_filter = as_stack_filter(stack_filter);
  }

  const frames = error_frames.map(err => ({
    key: err.message, lines: err.stack.split(/\r?\n/).filter(stack_filter) }));

  frames.reduce((cur, prev) => {
    cur.lines = diff_frame_lines(cur.lines, prev.lines);
    return prev;
  });

  if (asRawFrames) {
    return frames;
  } else {
    return frames.map(frame => [`    -- ${frame.key}`].concat(frame.lines));
  }
}const rx_stack_at = exports.rx_stack_at = /\s+at\s(.*)\s+\((.*)\)$/;
function as_stack_filter(suppress) {
  if (!suppress) {
    return line => rx_stack_at.exec(line);
  }

  if ('function' !== typeof suppress.has) {
    throw new TypeError(`Expected set-like suppress instance`);
  }

  return line => {
    const m = rx_stack_at.exec(line);
    if (!m) {
      return;
    }
    if (suppress.has(m[1]) || suppress.has(m[2])) {
      return;
    }
    const basename = m[2].split('.')[0];
    if (suppress.has(basename)) {
      return;
    }
    return true;
  };
}function diff_frame_lines(cur_lines, prev_lines) {
  let i0 = cur_lines.length - 1;
  let i1 = prev_lines.lastIndexOf(cur_lines[i0]);

  // match from the tail of cur_lines and walk backward until difference is found
  if (-1 === i1) {
    return cur_lines;
  }
  while (i0 >= 0 && i1 >= 0 && cur_lines[i0] === prev_lines[i1]) {
    i0--;i1--;
  }

  return cur_lines.slice(0, i0 + 1);
}

function flatten(lst) {
  return lst.reduce((a, b) => a.concat(b), []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,